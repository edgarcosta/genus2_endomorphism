import sys
sys.path.append(".");
import heuristic_endomorphisms
import misc
import AJ
AJ.load_gp();
import InvertAJglobal
import bound_rosati
import newton_lift


from sage.all import CDF, ComplexField, I, Matrix, NumberField, QQ, PolynomialRing
from sage.all import ceil, gp, latex, set_random_seed, sqrt, vector


digits= 600
prec = 2000
QQx = PolynomialRing(QQ, 'x');
g = QQx([-1, 5, -8, 4, -1, 1])
print "y^2 = %s" % latex(g)
End = heuristic_endomorphisms.EndomorphismData(g, prec = digits)
CClow = ComplexField(16);
CCap = ComplexField(prec);
K = End.field_of_definition()
alpha = Matrix([[0,sqrt(2)],[sqrt(2), 0]])
alphas =[misc.convert_magma_matrix_to_sage(elt, K).transpose() for elt in End.geometric_representations()[0]]
alphas_geo =[misc.convert_magma_matrix_to_sage(elt, QQ).transpose()  for elt in End.geometric_representations()[2]]
alpha_magma = -(2*alphas[2] -(alphas[0]  + alphas[1]))
alpha_geo = -(2*alphas_geo[2] -(alphas_geo[0]  + alphas_geo[1]))
#print alpha_magma
print "M = %s" % latex(alpha)
alpha_CCap = alpha.change_ring(CCap)
print "\quad"
print "R = %s" % latex(alpha_geo)
Pi = End.period_matrix().transpose()
print "%% M Pi = Pi R ? %s" % (CClow(vector((Pi * alpha_geo - alpha_CCap* Pi).list()).norm()),)
print "%% sqrt(2) = %s" % (CClow(alpha_CCap[0,1]),)


#Deals with odd degree f
#P = [1/2, sqrt(2)*I] doesn't work!
P = (-1, 2*sqrt(5)*I)
assert P[1] ** 2 == g(P[0])
P_CCap = vector(CCap, P)
print "P = %s %% = %s " % (latex(P), vector(CClow, P))
print "P_0 = (%s, 0)" % (gp.polroots(g)[1],)
G = g.parent()(list(reversed(g.padded_list(7))))
x0, y0 = P_CCap;
v = 1/x0;
w = CCap(y0/(x0**3));
# 0 = AJ.AJ1_digits( G, (0,0), digits)
total = (0 - vector(CCap, AJ.AJ1_digits( G, (v,w), digits)) ).list();
total.reverse();
#ajP = \int_\inf ^P w_i
ajP = vector(CCap, total);
alphaP_an = vector(CCap, alpha_CCap * ajP)
print "b \\approx %s" % (latex(Matrix(CClow, ajP).transpose()))

prec=1994
import random
seed = 1
random.seed(seed)
set_random_seed(seed)
iaj = InvertAJglobal.InvertAJglobal(g, prec, False);
iaj.iajlocal.verbose = False
alphaP_div = iaj.invertAJ(alphaP_an, 10)

#depends on the seed!
Q = [(0.91471118778273717916386517137708594122303477554477359199908101090164438077420233547768816792866335252738053446209298817181080452756866081089040666459861732681252429387447420319608758082284207550456533852401972334401225238898346045074551254482507568769049240144004092010239060949145428288828279136303138942561338141431527204394945653345966855248323618074224167981837817202860639326790837323059890712255753310251050137043927432881064543230595970826421089435771928958424883526178871218454148329530656591817554252392165587456418282206584197654415179344917808010614953766907653495218303971016571930552697 + 0.85618473971681750219949718132651145750956569813323752482871297508762886064455804049583448906009203346835042144708927177060468296580799709955222385124437116242740147952203458602607557452887024192879247525086332882127789810877471603882011837203474488026329790824793700575120667496101239849226595048884816671698297784996305896477000718160231624148202702271220767565534770882306873484888743828528755476900230732655959985361111281771688930932858578456154244693513716593742429087705592084259377300257197815153983203590761467576108393897574376186176812008736525265330625414842309203783526084420049896465530*I, 1.1304664918442533152141434655486812830403299711107674331387014612924085004867368858275847911952505870340751021802350496721416935473300390429420258353460625275709866557899566615002509119745058668637660297056902902188875566152553511050107927854493343636319509834017801298909761974551533074246723460635236233299107976498398599339604633770585541886421408841660653404508357773189651442783101657418343137818736339138349356106498337345046949854979474703093985246174170951902240729755801282347507427475002344185382884340108038385555882324108411935622164245303750543322114736173872858195814480129137887009394 - 1.8942654297102546545557739570804846370841109223909178100966672950313341093262067618871853954027211658487533021833837175043809408111134220029198360048210819752216851050005107614201087397954694713825208253773158098465977853051588930514056545794170977313462687123876530738503570504366275748101484176567828710331292835640080806140178796594179223104272890811245259435854743984034988181976849439426415456073724715643065987732885582370686257215383926146724314786694723355168721476677133525739590361296099138263234966591638252114450989718897773695854791662584381030620893740194881149127017457751078282248749*I), (0.33731801038961811164814526953471962644495257107801759992691001759243466186196211924366565151866517001043083307672497267008631408631540202123860546246676823259411867817197768468341115385812050082065269562892851299747951489560614515073876987210803364027064550761206143919057198156060851054819080706371824143467465193523730574514517920538575294489455907657079573495107449524109056360477254640831878901370659797729698364974692098495784675360769143416715575183944155694171980618118741278836147171852183564449834905869748375316325314833777469049687970680878234711970464201419769825042923293430139572441646 + 0.95742614319240385515366846445482674760091080911988781234067652014294105541641781579531249322307787125253874891223886441343896848817898558946463917436211067967150296387041361984453336441971367121091771140738032418584601351320031280294792900962167153762779056026631818916901663130084104058622050920240754774501435066628720232076035807739567923630174779259320587074560820352274337685883330631944748237452474576426838174520239172032029209758277571843657852946626625788483194616381982247945842869545865996752055307906316152356121306486564039883269783718690623686807561766635873419817200182295570874461325*I, 2.1330240057885740282526022610019181402203206462695010702129520048950319674037594858239535877341056994993621093263638480416259845942924803319739356605367012554739437893389765920592436916755047480117834871749083865705977311621325381032485917902281019635232290555966247886106818304966967154309734027161979011392064048513250846985000098758162359644600985723936389173639934010322064921830738317283978127449566053248955181767813750401055219355870641807263492894519376439985028597032545980704655831057321957481735577324002777423910483289002682750595802447851283392299008382016150285017151440585733879038792 - 0.39343482748845566530236093783813145739820256090003398113922006561973274296576237050031198278042211073332233838653921256968828314707784382394162167114865247994265906633295685142008783846351354292042003722695930400390595040989249947189372384425166260576865412647262305575449421334223872457085626653210225877082571226687360890502255584857852658078998263154687109053487409111240206962768272393154719168257393712016734975374453541069469324159909408406335311105271556792812012105979915562066781288499046080908674894671785641043337373094352600721024943893719778325914348731407497691722939291449968134190324*I)];
B = [(0.91626983664478729649940401520377346249089903887404916145380247881467567126658529045695432539424897975936428306412819693481869369576108731846476141171407825183869405450075905546816389093635267749884285379842088368745934235999950764179838475502117891299898622214869119390778676615531058989926087907722353318815878141127203382945178035816879310097012441763160551991070642917198749820669545190097461199000071556170689743930191615592587616510557612092143682088264048021581268284609959754043205819973833037550309604126891820543591155677058108552123610873527908068252370466122121841994750395785639489154682 + 0.84830156844739259942358356719902217745531995763276330780056766100571942352392518278057754653489299230650136391957927421341270504943277517551158398053639530664277907222104440875373286325800091916500864158798872961307293812238616342618325960507267339488453753960814397004739951334176397276676582904473919509957026611756382845702810072196503211340879726490464109884422575135751093702873800793930734580757091801891668227482244882203919916745149413452446381740569416592218369583648811694367857505859985295544786208240501329076317964591718479032489036017790656971466702581577913290954019002202046552092585*I, 1.1041386601114886129463120693388694654819702583425504733851976545242396487322714500485582997084097540514201452488794313224960618607427726666849132815824481073123416753554279157137921518428530073042304074734909032457962920976553908409964261682308419755963088127511072106915710194356667164375790642442981708388952171372292571189373438240615305970500233407644509087502504724537891872952637300428346774035406754241065494728210499531525519752574780037630505050293100712512745310784026740464768515228956896220145116373346686263140328186207144842455321638730963255275894060562032725244351436980661323901899 - 1.8835498881839247297217814393967551744586746481059617749356302218893155847638437197279645966791913494782841534419547383598444252291207002684784254808758001647142017179102638452868392688173229151005321979866918817754151668497332336210420540491590480757502009980657034427153862998505797842088917724521163260022799781259933097435018805605860282267985875018585713168080501599712251850942594947032134782345123803627463383484502406039688102074326619489563222568482753282957318587554568074865524828906963056706749583854296128952005170680354824439497980429816303888971841334633841585682529044307047619082200*I), (0.33113745527798769205491384483083340772393126185510042222415312130352343226071900311090253989803482645451625005083059793125946386487840398160290945979644321173449179017860588651906639553092419078958167508157601570425335870606223990836917119316713007314494565442588151419206906318173283959841016165172107053599854809845183903507325963276688783693086654068679280195192872969134666960818301294512344205211118332853872108899947876662184349091238559513828886150078770622995069262373951193045996554971983588105869793216453569371614867447981895067522620899423869249276221048965214668030771239380268414405364 + 0.96556351931596358719280081056412566661115888697930206139562912805202455636066010694849526432347645213480589422194831787034622444055069626011152941259370963139970903100557515369406879177939704472633687684020857916961649589511052800159715358251214459758127060128350836804118724789218504936504933266479496203594684533573149941930789690498955876321559504821698083241923288544485746412661193774955354027615552781305115388191708247601813788116577264790838636848167049498408476807905459530081991970203953865629270539061749045290704300853575428650923445244277745593635418586990939578660458505057407887992166*I, 2.1590120112597952629120072478370149224652668705791539878606694299716981935094178406376867216583521455626029226952381780855397435184736819927982484930193506183796326256413449264282507132099931893822337668618877167585519827755958373386258624865812554201243718715122560221802764525224185509464973650108710196683568324744071893557617781957730946478679810233680278208955143941921636821465236517672380957679184282440800278897334439379544279461504164384762520417698502356001654019714375495562179917706587729202781031960069643076086626169280662823725616798684082366009996161157683949629855187870473317626220 - 0.38348313836550168461031235896843263365835754005058434504335880708901057256544228978750737970841869712726208935733429844617804578026550860413342703221708508572256114739951403586603371753603682505872963953237395506130402053355862451903048269096104875713795773017057015190058685063185540196376065917736112508822301014258116921941745330626303771744562591123361656696510785490576040426318034864055067527832010565300441931933398945467843740260232248661750960192543818065509976880171630959680058306683688055538838273676603896815630212640112759253079374019885447578986328216547603043942840641284485004983769*I)];
for j, M in enumerate([Q, B]):
    if j == 0:
        name = "Q"
    else:
        print "\\\\"
        name = "O"
    for i, row in enumerate(Matrix(M).rows()):
        # CDF gets rid of obvious zeros
        print "%s_%d &\\approx %s\\\\" % (name, i+1, latex(vector(CClow,vector(CDF, row))))
print "."


name = "P"
for i, row in enumerate(alphaP_div.coordinates()):
    print "%s_%d &\\approx %s\\\\" % (name, i+1, latex(vector(CClow, vector(CDF, row))))
print "."

algx_poly = [QQ(-1)/3, -2, 1];
print "%% x coordinates satisfy: "
print latex(QQx(algx_poly))
print "%% = %s" % (vector(CClow, vector(CDF, alphaP_div.x_coordinates())),)

P1 = (-3 - 2 * sqrt(3), 2 * I * sqrt(1045*sqrt(3) + 1810));
P2 = (-3 + 2 * sqrt(3),-I * sqrt(7240 - 4180 * sqrt(3)));
print "P1 &= %s \\\\%% = %s" % (latex(P1), vector(CDF, P1))
print "P2 &= %s \\\\%% = %s" % (latex(P2), vector(CDF, P2))
diff = vector(CClow, (Matrix(CCap, [P1, P2]) - Matrix(CCap, alphaP_div.coordinates())).list()).norm()
print "%% embedding agrees? %s" % diff

L = (alpha[1,0].minpoly()*P[1].minpoly()*P1[0].minpoly()).splitting_field('b', simplify_all = True)
L_poly = PolynomialRing(L, "xL");
xL = L_poly.gen();
M = NumberField(xL, "c")
P_M = vector(M, [misc.NF_embedding_algdep(CCap(elt), M) for elt in P])
P_L = vector(L, [misc.NF_embedding_algdep(CCap(elt), L) for elt in P])
P1_M = vector(M, [misc.NF_embedding_algdep(CCap(elt), M) for elt in P1])
P2_M = vector(M, [misc.NF_embedding_algdep(CCap(elt), M) for elt in P2])
alpha_M = Matrix(M, [ vector(M, [misc.NF_embedding_algdep(CCap(elt), M) for elt in row]) for row in alpha.rows() ])
alpha_L = Matrix(L, [ vector(L, [misc.NF_embedding_algdep(CCap(elt), L) for elt in row]) for row in alpha.rows() ])


rosati = bound_rosati.bound_rosati(alpha_geo);

trace_and_norm = newton_lift.trace_and_norm_ladic(L, M, P_M, P1_M, P2_M, g, alpha_M, rosati, primes = ceil(prec * L.degree()/61));
print "%% trace and norm in terms of x"
print map(QQx, trace_and_norm)

QQt = PolynomialRing(QQ, 't')
t = QQt.gen()
sub = t - 1;
print "%% trace and norm in terms of t = x +1, i.e, x = -1 + t"
print "x_1(t) + x_2(t) = \\frac{%s}{%s}" % (latex(QQt(trace_and_norm[0])(sub)), latex(QQt(trace_and_norm[1])(sub)))
print "x_1(t)x_2(t) = \\frac{%s}{%s}" % (latex(QQt(trace_and_norm[2])(sub)), latex(QQt(trace_and_norm[3])(sub)))
print "%% use Mathematica to deduce the series expansion for x_1 and x_2"


import verify_algebraically
verified = verify_algebraically.verify_algebraically(g, P_L, alpha_L/2, trace_and_norm, True)
